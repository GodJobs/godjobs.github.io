<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DragonBones]]></title>
  <subtitle><![CDATA[From now on?!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://copyleft.me/"/>
  <updated>2016-01-22T16:30:19.000Z</updated>
  <id>http://copyleft.me/</id>
  
  <author>
    <name><![CDATA[Zachary]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Talk about BlockCanary]]></title>
    <link href="http://copyleft.me/2016/01/21/talk-about-blockcanary/"/>
    <id>http://copyleft.me/2016/01/21/talk-about-blockcanary/</id>
    <published>2016-01-21T15:00:00.000Z</published>
    <updated>2016-01-22T16:30:19.000Z</updated>
    <content type="html"><![CDATA[<p>前一段时间在微博上有人分享了一个透明检测应用卡顿方法的文章<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="external">（原文连接）</a>。我并没有急着去看文章的内容，而是先自己想一想，能否很快的在头脑中给出一个类似的解决方案。当然结果是并没有，哈哈，不过昨天文章的作者开源了相应的代码实现<a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">（源代码）</a>，今天就来好好分析学习一下。</p>
<a id="more"></a>
<h1 id="u4EE3_u7801_u7ED3_u6784"><a href="#u4EE3_u7801_u7ED3_u6784" class="headerlink" title="代码结构"></a>代码结构</h1><p>首先给出代码结构，不包含其中的资源部分。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── com</span><br><span class="line">    └── github</span><br><span class="line">        └── moduth</span><br><span class="line">            └── blockcanary</span><br><span class="line">                ├── BlockCanary<span class="class">.java</span></span><br><span class="line">                ├── BlockCanaryContext<span class="class">.java</span></span><br><span class="line">                ├── BlockListener<span class="class">.java</span></span><br><span class="line">                ├── LooperPrinter<span class="class">.java</span></span><br><span class="line">                ├── info</span><br><span class="line">                │   ├── CpuSampler<span class="class">.java</span></span><br><span class="line">                │   └── ThreadStackSampler<span class="class">.java</span></span><br><span class="line">                ├── log</span><br><span class="line">                │   ├── Block<span class="class">.java</span></span><br><span class="line">                │   ├── BlockCanaryInternals<span class="class">.java</span></span><br><span class="line">                │   ├── LogWriter<span class="class">.java</span></span><br><span class="line">                │   ├── PerformanceUtils<span class="class">.java</span></span><br><span class="line">                │   ├── ProcessUtils<span class="class">.java</span></span><br><span class="line">                │   └── UploadMonitorLog<span class="class">.java</span></span><br><span class="line">                └── ui</span><br><span class="line">                    ├── BlockDetailAdapter<span class="class">.java</span></span><br><span class="line">                    ├── DisplayBlockActivity<span class="class">.java</span></span><br><span class="line">                    ├── DisplayLeakConnectorView<span class="class">.java</span></span><br><span class="line">                    ├── LeakCanaryUi<span class="class">.java</span></span><br><span class="line">                    └── MoreDetailsView.java</span><br></pre></td></tr></table></figure>
<p>层次结构很清晰，只要明白了实现原理之后，理解起来就简单明了了。</p>
<h1 id="How_to_use"><a href="#How_to_use" class="headerlink" title="How to use"></a>How to use</h1><h2 id="u81EA_u5B9A_u4E49_u4E0A_u4E0B_u6587"><a href="#u81EA_u5B9A_u4E49_u4E0A_u4E0B_u6587" class="headerlink" title="自定义上下文"></a>自定义上下文</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppBlockCanaryContext</span> <span class="keyword">extends</span> <span class="title">BlockCanaryContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">// override to provide context like app qualifier, uid, network type, block threshold, log save path</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// this is default block threshold, you can set it by phone's performance</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getConfigBlockThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if set true, notification will be shown, else only write log file</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNeedDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// path to save log file</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLogPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/blockcanary/performance"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BlockCanaryContext</code>中主要提供一个配置参数和客户端信息，提供给日志使用，需要自定义实现。</p>
<h2 id="u5728_Application__u4E2D_u521D_u59CB_u5316_u5E76_u542F_u52A8"><a href="#u5728_Application__u4E2D_u521D_u59CB_u5316_u5E76_u542F_u52A8" class="headerlink" title="在 Application 中初始化并启动"></a>在 Application 中初始化并启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do it on main process</span></span><br><span class="line">        BlockCanary.install(<span class="keyword">this</span>, <span class="keyword">new</span> AppBlockCanaryContext()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你的应用是多进程的实现，初始化时一定要留意。如果应用中将执行耗时操作的<code>Service</code>配置到单独的进程中，那在<code>Application</code>中初始化时需要考虑清楚是否在<code>Service</code>的进程中初始化，因为一般的<code>Service</code>的操作也是在主线程执行的，不应该算在<code>UI</code>界面的性能考虑范围内。</p>
<h1 id="u57FA_u672C_u539F_u7406"><a href="#u57FA_u672C_u539F_u7406" class="headerlink" title="基本原理"></a>基本原理</h1><h2 id="u4ECE_u54EA_u4E0B_u624B"><a href="#u4ECE_u54EA_u4E0B_u624B" class="headerlink" title="从哪下手"></a>从哪下手</h2><p>在<code>Looper</code>的<code>loop</code>方法中有如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Printer logging = me.mLogging;</span><br><span class="line"><span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">	logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">			msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">	logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>dispatchMessage</code>方法调用前后，有一个打印的日志的方法可以<code>hook</code>，<code>BlockCanary</code>就是利用这个方式实现的。</p>
<p>具体实现就是获取主线程的消息处理耗时，与自定义<code>BlockCanaryContext</code>中配置的<code>BlockThreshold</code>做比较，如果超过阻塞伐值，就调用<code>BlockListener</code>获取设备和应用的环境信息。</p>
<h2 id="u80E1_u514B_println__u65B9_u6CD5"><a href="#u80E1_u514B_println__u65B9_u6CD5" class="headerlink" title="胡克 println 方法"></a>胡克 println 方法</h2><p>接下来看看<code>BlockCanary</code>是怎么样胡克的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!mStartedPrinting) &#123;</span><br><span class="line">		mStartTimeMillis = System.currentTimeMillis();</span><br><span class="line">		mStartThreadTimeMillis = SystemClock.currentThreadTimeMillis();</span><br><span class="line">		mStartedPrinting = <span class="keyword">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">		mStartedPrinting = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (isBlock(endTime)) &#123;</span><br><span class="line">			notifyBlockEvent(endTime);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>dispatchMessage</code>之前，会调用<code>println</code>方法，记录下当前系统时间，当前线程运行时间，后面判断<code>block</code>时会用到。</p>
<p>因为在<code>Looper</code>的<code>loop</code>方法的<code>dispatchMessage</code>前后都有调用<code>println</code>方法，这里加了一个标志位做判断。确认<code>block</code>之后，就会回调<code>BlockEvent</code>。</p>
<h2 id="Block__u901A_u77E5"><a href="#Block__u901A_u77E5" class="headerlink" title="Block 通知"></a>Block 通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyBlockEvent</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">long</span> startTime = mStartTimeMillis;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">long</span> startThreadTime = mStartThreadTimeMillis;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">long</span> endThreadTime = SystemClock.currentThreadTimeMillis();</span><br><span class="line">	BlockCanaryContext.get().getWriteLogFileThreadHandler().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			mBlockListener.onBlockEvent(startTime, endTime, startThreadTime, endThreadTime);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u4FE1_u606F_u6536_u96C6_u548C_u540E_u7EED_u5904_u7406"><a href="#u4FE1_u606F_u6536_u96C6_u548C_u540E_u7EED_u5904_u7406" class="headerlink" title="信息收集和后续处理"></a>信息收集和后续处理</h2><p>在非主线程回调<code>onBlockEvent</code>方法，做一些信息收集，日志上传，提示的工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBlockEvent</span><span class="params">(<span class="keyword">long</span> realTimeStart, <span class="keyword">long</span> realTimeEnd, <span class="keyword">long</span> threadTimeStart, <span class="keyword">long</span> threadTimeEnd)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 查询这段时间内的线程堆栈调用情况，CPU使用情况</span></span><br><span class="line">	ArrayList&lt;String&gt; threadStackEntries = mThreadStackSampler.getThreadStackEntries(realTimeStart, realTimeEnd);</span><br><span class="line">	<span class="comment">// Log.d("BlockCanary", "threadStackEntries: " + threadStackEntries.size());</span></span><br><span class="line">	<span class="keyword">if</span> (threadStackEntries.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		Block block = Block.newInstance()</span><br><span class="line">				.setMainThreadTimeCost(realTimeStart, realTimeEnd, threadTimeStart, threadTimeEnd)</span><br><span class="line">				.setCpuBusyFlag(mCpuSampler.isCpuBusy(realTimeStart, realTimeEnd))</span><br><span class="line">				.setRecentCpuRate(mCpuSampler.getCpuRateInfo())</span><br><span class="line">				.setThreadStackEntries(threadStackEntries)</span><br><span class="line">				.flushString();</span><br><span class="line">		LogWriter.saveLooperLog(block.toString());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (BlockCanaryContext.get().isNeedDisplay()) &#123;</span><br><span class="line">			Context context = BlockCanaryContext.get().getContext();</span><br><span class="line">			PendingIntent pendingIntent = DisplayBlockActivity.createPendingIntent(context, block.timeStart);</span><br><span class="line">			String contentTitle = context.getString(R.string.block_canary_class_has_blocked, block.timeStart);</span><br><span class="line">			String contentText = context.getString(R.string.block_canary_notification_message);</span><br><span class="line">			BlockCanary.<span class="keyword">this</span>.notify(contentTitle, contentText, pendingIntent);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取<code>CPU</code>信息，线程栈信息，保存到日志文件中，展示到界面上。</p>
<p>在<code>CpuSampler</code>中，每间隔一秒钟去读取<code>/proc/stat</code>和<code>/proc/{pid}/stat</code>中的信息进行分析，获取系统<code>CPU</code>使用情况，和当前进程的<code>CPU</code>使用情况。在<code>ThreadStackSampler</code>中每隔三秒去收集一次线程的调用栈。</p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><p>思路很新颖，实际的使用结果还是需要在项目中实践之后才能体会到。另外就是时间伐值的设置问题，不同的设备性能不一样，怎么样去控制伐值有点难把握。在<code>GitHub</code>上看到有人建议使用<code>Choreographer</code>去检测跳帧的情况，我觉得应该也是一个不错的思路，有时间的话好好研究一下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前一段时间在微博上有人分享了一个透明检测应用卡顿方法的文章<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/">（原文连接）</a>。我并没有急着去看文章的内容，而是先自己想一想，能否很快的在头脑中给出一个类似的解决方案。当然结果是并没有，哈哈，不过昨天文章的作者开源了相应的代码实现<a href="https://github.com/moduth/blockcanary">（源代码）</a>，今天就来好好分析学习一下。</p>]]>
    
    </summary>
    
      <category term="Opensource" scheme="http://copyleft.me/tags/Opensource/"/>
    
      <category term="Android" scheme="http://copyleft.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Adb commands]]></title>
    <link href="http://copyleft.me/2015/12/15/adb-commands/"/>
    <id>http://copyleft.me/2015/12/15/adb-commands/</id>
    <published>2015-12-15T02:57:00.000Z</published>
    <updated>2016-01-20T13:53:22.000Z</updated>
    <content type="html"><![CDATA[<p>Android Debug Bridge version 1.0.31</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"> <span class="operator">-a</span>                            - directs adb to listen on all interfaces <span class="keyword">for</span> a connection</span><br><span class="line"> <span class="operator">-d</span>                            - directs <span class="built_in">command</span> to the only connected USB device</span><br><span class="line">                                 returns an error <span class="keyword">if</span> more than one USB device is present.</span><br><span class="line"> <span class="operator">-e</span>                            - directs <span class="built_in">command</span> to the only running emulator.</span><br><span class="line">                                 returns an error <span class="keyword">if</span> more than one emulator is running.</span><br><span class="line"> <span class="operator">-s</span> &lt;specific device&gt;          - directs <span class="built_in">command</span> to the device or emulator with the given</span><br><span class="line">                                 serial number or qualifier. Overrides ANDROID_SERIAL</span><br><span class="line">                                 environment variable.</span><br><span class="line"> -p &lt;product name or path&gt;     - simple product name like <span class="string">'sooner'</span>, or</span><br><span class="line">                                 a relative/absolute path to a product</span><br><span class="line">                                 out directory like <span class="string">'out/target/product/sooner'</span>.</span><br><span class="line">                                 If -p is not specified, the ANDROID_PRODUCT_OUT</span><br><span class="line">                                 environment variable is used, <span class="built_in">which</span> must</span><br><span class="line">                                 be an absolute path.</span><br><span class="line"> -H                            - Name of adb server host (default: localhost)</span><br><span class="line"> -P                            - Port of adb server (default: <span class="number">5037</span>)</span><br><span class="line"> devices [<span class="operator">-l</span>]                  - list all connected devices</span><br><span class="line">                                 (<span class="string">'-l'</span> will also list device qualifiers)</span><br><span class="line"> connect &lt;host&gt;[:&lt;port&gt;]       - connect to a device via TCP/IP</span><br><span class="line">                                 Port <span class="number">5555</span> is used by default <span class="keyword">if</span> no port number is specified.</span><br><span class="line"> disconnect [&lt;host&gt;[:&lt;port&gt;]]  - disconnect from a TCP/IP device.</span><br><span class="line">                                 Port <span class="number">5555</span> is used by default <span class="keyword">if</span> no port number is specified.</span><br><span class="line">                                 Using this <span class="built_in">command</span> with no additional arguments</span><br><span class="line">                                 will disconnect from all connected TCP/IP devices.</span><br><span class="line"></span><br><span class="line">device commands:</span><br><span class="line">  adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;    - copy file/dir to device</span><br><span class="line">  adb pull &lt;remote&gt; [&lt;<span class="built_in">local</span>&gt;]  - copy file/dir from device</span><br><span class="line">  adb sync [ &lt;directory&gt; ]     - copy host-&gt;device only <span class="keyword">if</span> changed</span><br><span class="line">                                 (<span class="operator">-l</span> means list but don<span class="string">'t copy)</span><br><span class="line">                                 (see '</span>adb <span class="built_in">help</span> all<span class="string">')</span><br><span class="line">  adb shell                    - run remote shell interactively</span><br><span class="line">  adb shell &lt;command&gt;          - run remote shell command</span><br><span class="line">  adb emu &lt;command&gt;            - run emulator console command</span><br><span class="line">  adb logcat [ &lt;filter-spec&gt; ] - View device log</span><br><span class="line">  adb forward --list           - list all forward socket connections.</span><br><span class="line">                                 the format is a list of lines with the following format:</span><br><span class="line">                                    &lt;serial&gt; " " &lt;local&gt; " " &lt;remote&gt; "\n"</span><br><span class="line">  adb forward &lt;local&gt; &lt;remote&gt; - forward socket connections</span><br><span class="line">                                 forward specs are one of: </span><br><span class="line">                                   tcp:&lt;port&gt;</span><br><span class="line">                                   localabstract:&lt;unix domain socket name&gt;</span><br><span class="line">                                   localreserved:&lt;unix domain socket name&gt;</span><br><span class="line">                                   localfilesystem:&lt;unix domain socket name&gt;</span><br><span class="line">                                   dev:&lt;character device name&gt;</span><br><span class="line">                                   jdwp:&lt;process pid&gt; (remote only)</span><br><span class="line">  adb forward --no-rebind &lt;local&gt; &lt;remote&gt;</span><br><span class="line">                               - same as '</span>adb forward &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;<span class="string">' but fails</span><br><span class="line">                                 if &lt;local&gt; is already forwarded</span><br><span class="line">  adb forward --remove &lt;local&gt; - remove a specific forward socket connection</span><br><span class="line">  adb forward --remove-all     - remove all forward socket connections</span><br><span class="line">  adb jdwp                     - list PIDs of processes hosting a JDWP transport</span><br><span class="line">  adb install [-l] [-r] [-s] [--algo &lt;algorithm name&gt; --key &lt;hex-encoded key&gt; --iv &lt;hex-encoded iv&gt;] &lt;file&gt;</span><br><span class="line">                               - push this package file to the device and install it</span><br><span class="line">                                 ('</span><span class="operator">-l</span><span class="string">' means forward-lock the app)</span><br><span class="line">                                 ('</span>-r<span class="string">' means reinstall the app, keeping its data)</span><br><span class="line">                                 ('</span><span class="operator">-s</span><span class="string">' means install on SD card instead of internal storage)</span><br><span class="line">                                 ('</span>--algo<span class="string">', '</span>--key<span class="string">', and '</span>--iv<span class="string">' mean the file is encrypted already)</span><br><span class="line">  adb uninstall [-k] &lt;package&gt; - remove this app package from the device</span><br><span class="line">                                 ('</span>-k<span class="string">' means keep the data and cache directories)</span><br><span class="line">  adb bugreport                - return all information from the device</span><br><span class="line">                                 that should be included in a bug report.</span><br><span class="line"></span><br><span class="line">  adb backup [-f &lt;file&gt;] [-apk|-noapk] [-shared|-noshared] [-all] [-system|-nosystem] [&lt;packages...&gt;]</span><br><span class="line">                               - write an archive of the device'</span>s data to &lt;file&gt;.</span><br><span class="line">                                 If no <span class="operator">-f</span> option is supplied <span class="keyword">then</span> the data is written</span><br><span class="line">                                 to <span class="string">"backup.ab"</span> <span class="keyword">in</span> the current directory.</span><br><span class="line">                                 (-apk|-noapk <span class="built_in">enable</span>/<span class="built_in">disable</span> backup of the .apks themselves</span><br><span class="line">                                    <span class="keyword">in</span> the archive; the default is noapk.)</span><br><span class="line">                                 (-shared|-noshared <span class="built_in">enable</span>/<span class="built_in">disable</span> backup of the device<span class="string">'s</span><br><span class="line">                                    shared storage / SD card contents; the default is noshared.)</span><br><span class="line">                                 (-all means to back up all installed applications)</span><br><span class="line">                                 (-system|-nosystem toggles whether -all automatically includes</span><br><span class="line">                                    system applications; the default is to include system apps)</span><br><span class="line">                                 (&lt;packages...&gt; is the list of applications to be backed up.  If</span><br><span class="line">                                    the -all or -shared flags are passed, then the package</span><br><span class="line">                                    list is optional.  Applications explicitly given on the</span><br><span class="line">                                    command line will be included even if -nosystem would</span><br><span class="line">                                    ordinarily cause them to be omitted.)</span><br><span class="line"></span><br><span class="line">  adb restore &lt;file&gt;           - restore device contents from the &lt;file&gt; backup archive</span><br><span class="line"></span><br><span class="line">  adb help                     - show this help message</span><br><span class="line">  adb version                  - show version num</span><br><span class="line"></span><br><span class="line">scripting:</span><br><span class="line">  adb wait-for-device          - block until device is online</span><br><span class="line">  adb start-server             - ensure that there is a server running</span><br><span class="line">  adb kill-server              - kill the server if it is running</span><br><span class="line">  adb get-state                - prints: offline | bootloader | device</span><br><span class="line">  adb get-serialno             - prints: &lt;serial-number&gt;</span><br><span class="line">  adb get-devpath              - prints: &lt;device-path&gt;</span><br><span class="line">  adb status-window            - continuously print device status for a specified device</span><br><span class="line">  adb remount                  - remounts the /system partition on the device read-write</span><br><span class="line">  adb reboot [bootloader|recovery] - reboots the device, optionally into the bootloader or recovery program</span><br><span class="line">  adb reboot-bootloader        - reboots the device into the bootloader</span><br><span class="line">  adb root                     - restarts the adbd daemon with root permissions</span><br><span class="line">  adb usb                      - restarts the adbd daemon listening on USB</span><br><span class="line">  adb tcpip &lt;port&gt;             - restarts the adbd daemon listening on TCP on the specified port</span><br><span class="line">networking:</span><br><span class="line">  adb ppp &lt;tty&gt; [parameters]   - Run PPP over USB.</span><br><span class="line"> Note: you should not automatically start a PPP connection.</span><br><span class="line"> &lt;tty&gt; refers to the tty for PPP stream. Eg. dev:/dev/omap_csmi_tty1</span><br><span class="line"> [parameters] - Eg. defaultroute debug dump local notty usepeerdns</span><br><span class="line"></span><br><span class="line">adb sync notes: adb sync [ &lt;directory&gt; ]</span><br><span class="line">  &lt;localdir&gt; can be interpreted in several ways:</span><br><span class="line"></span><br><span class="line">  - If &lt;directory&gt; is not specified, both /system and /data partitions will be updated.</span><br><span class="line"></span><br><span class="line">  - If it is "system" or "data", only the corresponding partition</span><br><span class="line">    is updated.</span><br><span class="line"></span><br><span class="line">environmental variables:</span><br><span class="line">  ADB_TRACE                    - Print debug information. A comma separated list of the following values</span><br><span class="line">                                 1 or all, adb, sockets, packets, rwx, usb, sync, sysdeps, transport, jdwp</span><br><span class="line">  ANDROID_SERIAL               - The serial number to connect to. -s takes priority over this if given.</span><br><span class="line">  ANDROID_LOG_TAGS             - When used with the logcat option, only these debug tags are printed.</span></span><br></pre></td></tr></table></figure>
<h2 id="u5E38_u7528_u547D_u4EE4"><a href="#u5E38_u7528_u547D_u4EE4" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices [<span class="operator">-l</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>列出当前已经连接的所有<code>Android</code>设备</li>
<li><p>使用过程中发现，<code>-l</code>选项使用还是不使用效果类似</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">emulator-<span class="number">5554</span>          device</span><br><span class="line"><span class="number">09</span>f0ce98               device</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.11</span>:<span class="number">31015</span>     device</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>-l</code>选项后，如果设备包含更丰富的信息，也会同时展示出来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb devices <span class="operator">-l</span></span><br><span class="line">List of devices attached</span><br><span class="line">emulator-<span class="number">5554</span>          device</span><br><span class="line"><span class="number">09</span>f0ce98               device usb:<span class="number">3</span>-<span class="number">1</span> product:razor model:Nexus_7 device:flo</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.11</span>:<span class="number">31015</span>     device</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;host&gt;[:&lt;port&gt;]</span><br></pre></td></tr></table></figure>
<ul>
<li>一般，如果使用模拟器或者USB连接的<code>Android</code>设备，模拟器或者<code>Android</code>设备会自动连接到<code>ADB</code>，可以直接通过<code>devices</code>命令查看</li>
<li>通过<code>TCP/IP</code>方式连接时，指定需要连接的设备的<code>host</code>（一般就是<code>ip</code>地址），和可选端口号<code>port</code>（不指定时默认为<code>5555</code>），就可以连接到指定的<code>Android</code>设备</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb disconnect [&lt;host&gt;[:&lt;port&gt;]]</span><br></pre></td></tr></table></figure>
<ul>
<li>断开与指定<code>Android</code>设备的连接</li>
<li>如果不指定<code>port</code>，默认为<code>5555</code></li>
<li>如果不指定任何参数，将会断开所有已经连接的<code>Android</code>设备（以<code>TCP/IP</code>方式连接的所有设备 ）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>将本地<code>local</code>的文件或者文件夹拷贝到远程<code>remote</code></li>
<li>在<code>Windows</code>下和非<code>Windows</code>下拷贝文件夹到远程设备<code>remote</code>是有区别的。在<code>Windows</code>下拷贝文件夹时，一定不要在文件夹名称后面添加斜杠<code>\</code>或者反斜杠<code>/</code>，比如<code>adb push dir /data/data</code>，否则会提示没有<code>dir</code>这个文件或者文件夹。在非<code>Windows</code>操作系统中可以添加反斜杠<code>/</code>也可以不添加，效果都一样</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;remote&gt; [&lt;<span class="built_in">local</span>&gt;]</span><br></pre></td></tr></table></figure>
<ul>
<li>从远程设备<code>remote</code>拷贝文件或者文件夹到本地目录</li>
<li>不指定本地目录<code>local</code>，默认拷贝到命令执行的路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell [&lt;<span class="built_in">command</span>&gt;]</span><br></pre></td></tr></table></figure>
<ul>
<li>运行指定设备的<code>SHELL</code></li>
<li>如果不指定命令，则会进入交互模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb emu &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行模拟器控制台命令</li>
<li>现在很少使用模拟器（另外一个原因就是不太了解模拟器控制台命令），使用过的命令也只有一个<code>adb -s emulator-5554 emu kill</code>，停止模拟器</li>
<li>需要多了解一点的可以参考<a href="https://devmaze.wordpress.com/2011/12/12/starting-and-stopping-android-emulators/" target="_blank" rel="external">Starting and stopping android emulators</a></li>
<li>需要了解更多的模拟器控制台命令，可以参考<a href="http://www.linuxtopia.org/online_books/android/devguide/guide/developing/tools/android_emulator_console.html" target="_blank" rel="external">Using the Emulator Console</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat [ &lt;filter-spec&gt; ]</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>logcat</code>命令抓取日志信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install [<span class="operator">-l</span>] [-r] [<span class="operator">-s</span>] [--algo &lt;algorithm name&gt; --key &lt;hex-encoded key&gt; --iv &lt;hex-encoded iv&gt;] &lt;file&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>安装<code>APK</code>文件到指定的设备中</li>
<li><code>--algo --key --iv</code>三个参数用于安装加密<code>APK</code>文件，是在<code>Android4.1</code>之后加入的，详细信息可以参考<a href="https://books.google.com.hk/books?id=y11NBQAAQBAJ&amp;pg=PA77&amp;lpg=PA77&amp;dq=android+adb+install+encode+apk&amp;source=bl&amp;ots=nUXvzUuR3B&amp;sig=OjwcwaR0tHzNgdwK7r60rr_4GRo&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwihn_retd3JAhUDVI4KHT2pAxsQ6AEIITAB#v=onepage&amp;q=android%20adb%20install%20encode%20apk&amp;f=false" target="_blank" rel="external">Android Security Internals</a>（需自备梯子）</li>
<li><code>-l</code>选项一般用于付费应用，是在<code>Android2.2</code>之后加入的拷贝保护机制，<code>Android4.1</code>中进行了重新设计，具体可以参见上面的链接</li>
<li><code>-r</code>选项用于重新安装，重新安装时会保留应用的数据</li>
<li><code>-s</code>选项指定安装位置为<code>SDCARD</code></li>
<li>如果仅仅指定了需要安装的<code>APK</code>文件路径，那么将会执行升级安装，并且安装到设备的内部存储中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall [-k] &lt;package&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过应用的包名卸载应用</li>
<li><code>-k</code>选项表示保留应用的数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb bugreport</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>ADB</code>生成<code>BUG</code>报告，包含的信息非常的多，包括整个设备的很多状态信息，一般很少会用到</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb backup [<span class="operator">-f</span> &lt;file&gt;] [-apk|-noapk] [-shared|-noshared] [-all] [-system|-nosystem] [&lt;packages...&gt;]</span><br></pre></td></tr></table></figure>
<ul>
<li>备份应用数据，备份所有应用数据，或者指定的应用数据（具体内容参见命令描述）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb restore &lt;file&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>从备份文件中恢复数据</li>
</ul>
<h2 id="u4E0D_u5E38_u7528_u7684_u547D_u4EE4"><a href="#u4E0D_u5E38_u7528_u7684_u547D_u4EE4" class="headerlink" title="不常用的命令"></a>不常用的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb forward --list</span><br><span class="line">adb forward &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;</span><br><span class="line">adb forward --no-rebind &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;</span><br><span class="line">adb forward --remove &lt;<span class="built_in">local</span>&gt;</span><br><span class="line">adb forward --remove-all</span><br></pre></td></tr></table></figure>
<ul>
<li><code>adb</code>端口转发命令，一般的应用开发很少用到，可以看看<a href="http://blog.chinaunix.net/uid-20564848-id-73687.html" target="_blank" rel="external">Adb端口转发</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb jdwp</span><br></pre></td></tr></table></figure>
<ul>
<li>列出所有支持<code>ADWP</code>协议调试的进程号，一般会结合端口转发使用，参见<a href="http://mybrainoncode.com/blog/2013/11/03/debugging-android-with-jdb/" target="_blank" rel="external">Debugging Android with jdb</a></li>
<li>现在的开发工具<code>Android Studio</code>已经集成了调试工具，开发者一般不会使用命令行进行调试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip &lt;port&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>重启设备的<code>ADBD</code>，一般从<code>USB</code>模式切换到<code>WIFI</code>模式时使用</li>
<li>使用<code>USB</code>连接设备，执行<code>adb tcpip 5555</code>，断开<code>USB</code>，执行<code>adb connect ip</code>就可以了</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb ppp &lt;tty&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在<code>Linux PC</code>和<code>Android</code>设备之间建立<code>PPP</code>链接，可以实现设备通过电脑连接到网络</li>
<li>参考<a href="http://www.cnblogs.com/hoji-real/articles/2362619.html" target="_blank" rel="external">How to set up Android ppp over usb with adb</a></li>
<li>没有使用过这个命令，因为手头没有可用的设备，所以也没办法测试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb sync [ &lt;directory&gt; ]</span><br></pre></td></tr></table></figure>
<ul>
<li>将<code>Host</code>目录中的文件，同步到<code>Android</code>设备的<code>system</code>或者<code>data</code>分区</li>
<li>使用<code>-p</code>或者在环境变量中定义<code>ANDROID_PRODUCT_OUT</code>指定<code>Host</code>目录</li>
<li><code>adb -p dir sync</code>会将<code>dir</code>目录下的<code>system</code>和<code>data</code>目录中的文件同步到设备中，<code>dir</code>要提供绝对路径，而且只会同步<code>dir</code>目录下的<code>system</code>和<code>data</code>目录，如果没有这两个目录，则不会同步任何文件</li>
<li>如果只需要同步<code>system</code>目录中的文件，可以执行<code>adb -p dir sync system</code>命令</li>
<li>如果只需要同步<code>data</code>目录中的文件，可以执行<code>adb -p dir sync data</code>命令</li>
</ul>
<h2 id="Support_adb_client_connect_to_remote_server"><a href="#Support_adb_client_connect_to_remote_server" class="headerlink" title="Support adb client connect to remote server"></a>Support adb client connect to remote server</h2><ul>
<li>一般很少会碰到这种应用场景，<code>ADB</code>的<code>changelog</code>中有说明，具体参见最后的参考部分</li>
<li>假设一种情况，有一个设备通过<code>USB</code>连接到了一个远程电脑上，需要连接到远程电脑上的<code>ADB server</code>，你就可以使用下面的方式实现（测试中发现<code>Windows</code>中是不行的，<code>Windows</code>中的<code>ADB</code>就没有<code>-P</code>选项）</li>
<li>在远程电脑上执行<code>adb -a -P 5037 fork-server server &amp;</code>，这种方式启动<code>ADB server</code>可以通过远程连接</li>
<li>执行<code>adb -H ip shell</code>连接到远程<code>ADB server</code></li>
<li>执行完以上步骤之后，你就可以像使用本地<code>ADB server</code>一样使用<code>ADB</code>命令了</li>
</ul>
<p>其他命令比较简单，就不做介绍了，<code>ADB</code>的命令还是有很多实用价值的，值得好好学习。</p>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gitlab.com/pbeeler/system_core/commit/d7b33085117ccbb908a883f624cb1fe5495ee92a" target="_blank" rel="external">ADB Changelog</a><br><a href="http://stackoverflow.com/questions/13278429/how-to-set-up-adb-for-remote-machine-development-and-local-device-deployment#18551325" target="_blank" rel="external">Remote ADB</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Debug Bridge version 1.0.31</p>]]>
    
    </summary>
    
      <category term="Adb" scheme="http://copyleft.me/tags/Adb/"/>
    
      <category term="Android" scheme="http://copyleft.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How ADB works]]></title>
    <link href="http://copyleft.me/2015/12/14/how-adb-works/"/>
    <id>http://copyleft.me/2015/12/14/how-adb-works/</id>
    <published>2015-12-14T08:19:00.000Z</published>
    <updated>2016-01-20T13:53:22.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Android Debug Bridge (adb) is a versatile command line tool that lets you communicate with an emulator instance or connected Android-powered device. It is a client-server program that includes three components:</p>
<ul>
<li>A client, which runs on your development machine. You can invoke a client from a shell by issuing an adb command. Other Android tools such as the ADT plugin and DDMS also create adb clients.</li>
<li>A server, which runs as a background process on your development machine. The server manages communication between the client and the adb daemon running on an emulator or device.</li>
<li>A daemon, which runs as a background process on each emulator or device instance.</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="What_is_ADB"><a href="#What_is_ADB" class="headerlink" title="What is ADB"></a>What is ADB</h2><ul>
<li>如果你是一个<code>Android</code>开发者，你应该使用过<code>adb logcat</code>，<code>adb shell</code>等命令</li>
<li>甚至你仅仅使用过<code>Android Studio</code>或者<code>Eclipse</code>中的<code>DDMS</code>，内部也是使用<code>ADB</code>实现的</li>
<li>使用<code>ADB</code>你可以连接模拟器或者真实的<code>Android</code>设备</li>
</ul>
<h2 id="How_to_connect"><a href="#How_to_connect" class="headerlink" title="How to connect"></a>How to connect</h2><p><img src="http://7xonwp.com1.z0.glb.clouddn.com/blogadb_how_to_connect.png" alt="How to connect"></p>
<h2 id="ADB_overview"><a href="#ADB_overview" class="headerlink" title="ADB overview"></a>ADB overview</h2><p><img src="http://7xonwp.com1.z0.glb.clouddn.com/blogadb_overview.png" alt="Overview"></p>
<p><code>ADB</code>是一个和<code>Aandroid</code>模拟器或者<code>Android</code>设备通信的通用工具，一般开发者会使用<code>adb logcat</code>等命令，从<code>Android</code>设备中获取分析数据。</p>
<p><code>ADB</code>是一个客户端-服务端模式的程序，包括三个部分：</p>
<ul>
<li>客户端，运行在<code>Host</code>上。当使用<code>shell</code>发送<code>ADB</code>命令时就会调起一个客户端。<code>ADT</code>插件或者<code>DDMS</code>也会创建<code>ADB</code>客户端</li>
<li>服务端，运行在<code>Host</code>的后台程序，负责管理客户端和模拟器或者<code>Android</code>设备上守护程序的通信，一般使用<code>Host</code>的<code>5037</code>端口</li>
<li>守护程序（ADBD），运行在模拟器或者<code>Android</code>设备上的后台守护程序</li>
</ul>
<p>客户端+服务端运行在<code>Host</code>上，这两部构成了<code>ADB</code>的客户端，守护程序（ADBD）运行在模拟器或者<code>Android</code>设备上这才是<code>ADB</code>的服务端。总的来说就是，<code>ADBD</code>向<code>Host</code>上的客户端+服务端提供服务，服务端扮演一个代理的角色。</p>
<p><img src="http://7xonwp.com1.z0.glb.clouddn.com/blogadb_seq_chart.png" alt="Seq Chart"></p>
<h2 id="2_roles_of_ADB"><a href="#2_roles_of_ADB" class="headerlink" title="2 roles of ADB"></a>2 roles of ADB</h2><ul>
<li>提供通信功能<ul>
<li>为<code>Host</code>和目标设备提供通信途径</li>
<li>使用<code>USB</code>或者<code>TCP</code>通信，但是客户端不用关心</li>
</ul>
</li>
<li>提供服务功能<ul>
<li>通过通信功能在目标设备上执行一些操作<ul>
<li>使用<code>adb shell</code>执行命令</li>
<li>使用<code>adb pull/push</code>进行文件传输</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="When_does_ADB_server_start"><a href="#When_does_ADB_server_start" class="headerlink" title="When does ADB server start"></a>When does ADB server start</h2><ul>
<li>明确地调用<code>adb start-server</code><ul>
<li>这条命令会以后台进程的方式启动<code>ADB server</code></li>
</ul>
</li>
<li>通常不需要调用<code>adb start-server</code>，<code>ADB server</code>会在需要的时候自动启动</li>
<li>需要重启<code>ADB server</code>时，执行<code>adb kill-server</code></li>
<li>事实上，<code>ADB client</code>和<code>ADB server</code>共享同一个可执行程序<ul>
<li><code>adb start-server</code>等效于<code>adb fork-server server &amp;</code></li>
</ul>
</li>
</ul>
<h2 id="Secure_mode"><a href="#Secure_mode" class="headerlink" title="Secure mode"></a>Secure mode</h2><ul>
<li><code>Android</code>设备都有<code>ADBD</code>，一般都运行在安全模式下(<code>ro.secure</code> = 1)。</li>
<li>如果<code>ro.secure</code> = 1，<code>ADBD</code>将会以<code>SHELL</code>用户身份运行（<code>SHELL</code>用户并没有特权），否则<code>ADBD</code>则会以<code>root</code>用户身份运行</li>
<li>在安全模式下，<code>ADBD</code>是以<code>SHELL</code>用户身份调用所有服务的，一些服务将会因为权限不足而调用失败</li>
</ul>
<h2 id="How_secure_mode_decided"><a href="#How_secure_mode_decided" class="headerlink" title="How secure mode decided"></a>How secure mode decided</h2><ul>
<li>模拟器上<code>secure</code> = 0（非安全模式）</li>
<li>系统属性中<code>ro.secure</code> == 1 → <code>secure</code> = 1（安全模式）<ul>
<li>如果<code>ro.debuggable</code> == 1（可以调试）, 可以通过<code>adb root</code>启动非安全模式的<code>adb</code></li>
</ul>
</li>
<li>基本上所有的<code>Android</code>出货设备默认都是<code>ro.secure</code> = 1（安全模式）, <code>ro.debuggable</code> = 0（不可调试）</li>
</ul>
<hr>
<p><a href="https://events.linuxfoundation.org/images/stories/pdf/lf_abs12_kobayashi.pdf" target="_blank" rel="external">原文链接</a> （以上图片均来自原文）</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Android Debug Bridge (adb) is a versatile command line tool that lets you communicate with an emulator instance or connected Android-powered device. It is a client-server program that includes three components:</p>
<ul>
<li>A client, which runs on your development machine. You can invoke a client from a shell by issuing an adb command. Other Android tools such as the ADT plugin and DDMS also create adb clients.</li>
<li>A server, which runs as a background process on your development machine. The server manages communication between the client and the adb daemon running on an emulator or device.</li>
<li>A daemon, which runs as a background process on each emulator or device instance.</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="Adb" scheme="http://copyleft.me/tags/Adb/"/>
    
      <category term="Android" scheme="http://copyleft.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Adb client & server & adbd]]></title>
    <link href="http://copyleft.me/2015/12/11/adb-client-server-adbd/"/>
    <id>http://copyleft.me/2015/12/11/adb-client-server-adbd/</id>
    <published>2015-12-11T08:19:00.000Z</published>
    <updated>2016-01-20T13:53:22.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Android Debug Bridge (adb) is a versatile command line tool that lets you communicate with an emulator instance or connected Android-powered device. It is a client-server program that includes three components:</p>
<ul>
<li>A client, which runs on your development machine. You can invoke a client from a shell by issuing an adb command. Other Android tools such as the ADT plugin and DDMS also create adb clients.</li>
<li>A server, which runs as a background process on your development machine. The server manages communication between the client and the adb daemon running on an emulator or device.</li>
<li>A daemon, which runs as a background process on each emulator or device instance.</li>
</ul>
</blockquote>
<a id="more"></a>
<p><code>Adb</code>是<code>Android</code>开发者经常使用的一个命令行工具，经常用来连接<code>Android</code>设备，获取分析数据。</p>
<p>今天在查看<code>adb</code>帮助文档时，对其中的几个没用过的参数很疑惑，非常非常常用的一个工具，但是我却对它的工作模式，没有一点点的了解。于是便引出了<code>adb</code>背后的故事。</p>
<h2 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h2><p><code>Adb</code>是一个客户端-服务端模式的程序，包括三个部分：</p>
<ul>
<li>客户端，通常你在使用<code>adb</code>命令时，操作的就是客户端</li>
<li>服务端，一个看不见的后台进程，一般运行在<code>PC</code>端的5037端口，你应该很熟悉这个端口号</li>
<li>守护进程，一般来说一个<code>Android</code>设备对应一个守护进程，守护进程和服务器通信</li>
</ul>
<h2 id="u670D_u52A1_u7AEF"><a href="#u670D_u52A1_u7AEF" class="headerlink" title="服务端"></a>服务端</h2><p><code>Adb</code>中最重要的部分要数服务端了，它是连通客户端和守护进程的枢纽。一般运行在5037端口，著名的『adb server is out of date.  killing』就是因为服务端要使用5037端口已经被占用引起的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb start-server</span><br><span class="line">daemon not running. starting it now on port <span class="number">5037</span> *</span><br><span class="line">daemon started successfully *</span><br></pre></td></tr></table></figure>
<p><code>adb start-server</code>启动服务端，就会告诉你服务进程成功在5037端口运行。</p>
<p>我们使用命令看看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -Pn | grep <span class="number">5037</span></span><br><span class="line">adb <span class="number">6479</span> <span class="number">7</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (LISTEN)</span><br></pre></td></tr></table></figure>
<p>这是没有连接任何<code>Android</code>设备的情况，下面我们启动一个<code>Android</code>模拟器。</p>
<h2 id="u5B88_u62A4_u8FDB_u7A0B"><a href="#u5B88_u62A4_u8FDB_u7A0B" class="headerlink" title="守护进程"></a>守护进程</h2><p>上面说过，一个<code>Android</code>设备对应一个守护进程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -Pn | grep <span class="number">5037</span></span><br><span class="line">adb <span class="number">6479</span> <span class="number">7</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (LISTEN)</span><br><span class="line">adb <span class="number">6479</span> <span class="number">6</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58069</span> (ESTABLISHED)</span><br><span class="line">emulator6 <span class="number">6616</span> <span class="number">5</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58069</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (ESTABLISHED)</span><br></pre></td></tr></table></figure>
<p>在启动了一个模拟器之后，对应的启动了一个守护进程，和服务端保持通信。</p>
<p>接下来我们再启动一个模拟器看看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -Pn | grep <span class="number">5037</span></span><br><span class="line">adb <span class="number">6479</span> <span class="number">7</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (LISTEN)</span><br><span class="line">adb <span class="number">6479</span> <span class="number">6</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58069</span> (ESTABLISHED)</span><br><span class="line">adb <span class="number">6479</span> <span class="number">13</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58452</span> (ESTABLISHED)</span><br><span class="line">emulator6 <span class="number">6616</span> <span class="number">5</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58069</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (ESTABLISHED)</span><br><span class="line">emulator6 <span class="number">6807</span> <span class="number">5</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58452</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (ESTABLISHED)</span><br></pre></td></tr></table></figure>
<p>可以看到，再启动了一个模拟器之后，对应的也启动了一个守护进程。</p>
<p>服务端和守护进程启动之后，我们就需要使用客户端进行与守护进程间的通信了。</p>
<h2 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h2><p>要查看客户端，需要通过<code>adb shell</code>命令连接到模拟器，连接之后我们看看结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -Pn | grep <span class="number">5037</span></span><br><span class="line">adb <span class="number">6479</span> <span class="number">7</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (LISTEN)</span><br><span class="line">adb <span class="number">6479</span> <span class="number">6</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58069</span> (ESTABLISHED)</span><br><span class="line">adb <span class="number">6479</span> <span class="number">17</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">59091</span> (ESTABLISHED)</span><br><span class="line">emulator6 <span class="number">6616</span> <span class="number">5</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">58069</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (ESTABLISHED)</span><br><span class="line">adb <span class="number">6873</span> <span class="number">3</span>u IPv4 <span class="number">0</span>t0 TCP <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">59091</span>-&gt;<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5037</span> (ESTABLISHED)</span><br></pre></td></tr></table></figure>
<p>到这里，我们可以看出整个<code>PC</code>端的<code>adb</code>的运行模式：</p>
<p><img src="http://7xonwp.com1.z0.glb.clouddn.com/blog_adb_adbd.jpg" alt="Adb运行模式"></p>
<p>图片引用自<code>Android Adb Analyse</code>。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>通过以上的简单分析，我们已经清晰的看出<code>PC</code>上<code>adb</code>的运行模式。并不像我之前简单认为的是从<code>PC</code>直接连接到<code>Android</code>设备的。一定要理解清楚客户端，服务端和<code>ADBD</code>之间的关系。后面有时间的话，希望能对<code>ADBD</code>进行深入的了解。</p>
<h2 id="u53C2_u8003_u94FE_u63A5"><a href="#u53C2_u8003_u94FE_u63A5" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://blog.csdn.net/stpeace/article/details/24933813" target="_blank" rel="external">Adb 原理浅析</a></li>
<li><a href="http://blog.csdn.net/liranke/article/details/4999210" target="_blank" rel="external">Android Adb Analyse</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Android Debug Bridge (adb) is a versatile command line tool that lets you communicate with an emulator instance or connected Android-powered device. It is a client-server program that includes three components:</p>
<ul>
<li>A client, which runs on your development machine. You can invoke a client from a shell by issuing an adb command. Other Android tools such as the ADT plugin and DDMS also create adb clients.</li>
<li>A server, which runs as a background process on your development machine. The server manages communication between the client and the adb daemon running on an emulator or device.</li>
<li>A daemon, which runs as a background process on each emulator or device instance.</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="Adb" scheme="http://copyleft.me/tags/Adb/"/>
    
      <category term="Android" scheme="http://copyleft.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://copyleft.me/2015/11/25/hello-world/"/>
    <id>http://copyleft.me/2015/11/25/hello-world/</id>
    <published>2015-11-24T16:00:00.000Z</published>
    <updated>2016-01-20T13:53:22.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
  </entry>
  
</feed>
